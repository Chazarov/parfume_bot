from fastapi import FastAPI, Request
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramBadRequest
import uvicorn
from config import configs

app = FastAPI()
bot = Bot(token=configs.BOT_TOKEN)
dp = Dispatcher()

@app.post("/cart")
async def process_cart(request: Request):
    data = await request.json()
    
    telegram_id = data.get('telegram_id')
    cart = data.get('cart')
    username = data.get('username')
    admin_id = data.get('admin_id')

    if not admin_id:
        print("Admin ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return {"error": "Admin ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}, 400
    
    if not telegram_id:
        print("Admin ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return {"error": "Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}, 400
    
    cart_items = "\n\n".join(
        [f"‚Ññ{item['product_id']} {item['name']}: \n  -- —Ü–µ–Ω–∞: {item['price']} ‚ÇΩ \n  -- –æ–±—ä–µ–º: {item['volume']}ml " for item in cart]
    )
    
    user_message = f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n{cart_items}.\n\n –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑! \n –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    admin_message = f"id:{telegram_id} @{username}:\n\n\n{cart_items}"
    
    try:
        await bot.send_message(admin_id, admin_message)
        
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ Telegram: {str(e)} \n data: {data}")
        return {"error": f"–û—à–∏–±–∫–∞ Telegram: {str(e)}"}, 400
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} \n data: {data}")
        return {"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}, 500
    
    try:
        await bot.send_message(telegram_id, user_message)
        
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ Telegram: {str(e)} \n data: {data}")
        return {"error": f"–û—à–∏–±–∫–∞ Telegram: {str(e)}"}, 400
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} \n data: {data}")
        return {"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}, 500


    return {"status": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"}, 200

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ! –Ø L‚ÄôARIAN - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –≥–∞–ª–µ—Ä–µ–µ –ü–∞—Ä—Ñ—é–º–∞! –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ  –≤—ã–±—Ä–∞—Ç—å –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞—Ä–æ–º–∞—Ç –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞,  –∞ —Ç–∞–∫–∂–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!" +
    "\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥–∞–ª–µ—Ä–µ—é –ø–æ —Å–∏–Ω–µ–π –∫–Ω–æ–ø–∫–µ üòè")

async def start_uvicorn():
    config = uvicorn.Config(app, host=configs.MAIN_HOST, port=int(configs.MAIN_PORT))
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    asyncio.create_task(start_uvicorn())
    
    await dp.start_polling(bot)
    print("start")

if __name__ == "__main__":
    asyncio.run(main())